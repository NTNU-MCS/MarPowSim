%% File : scavenging1Zone.tlc
%% Created: Tue Sep  8 12:45:11 2015
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "scavenging1Zone.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  scavenging1Zone "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
extern void scavenging1Zone_Outputs_wrapper(const real_T *pCyl,
			const real_T *TCyl,
			const real_T *FCyl,
			const real_T *pIn,
			const real_T *TIn,
			const real_T *FIn,
			const real_T *combState, 
			const real_T *phi,
			real_T *TOut,
			real_T *FOut,
			real_T *lambS,
			real_T *betaS,
			const real_T *xC,
			const real_T  *kai, const int_T  p_width0,
			const real_T  *delta, const int_T  p_width1,
			const real_T  *fs, const int_T  p_width2,
			const real_T  *volDisp, const int_T  p_width3,
			const real_T  *CAIPO, const int_T  p_width4,
            const int_T *resetIn, 
            const int_T *resetOut, 
            const real_T *mInPrev,
            const real_T *F0,
			const real_T *rho0,
			const real_T *hIn0,
			const real_T *hCyl0);
extern void scavenging1Zone_Derivatives_wrapper(const real_T *pCyl,
			const real_T *TCyl,
			const real_T *FCyl,
			const real_T *pIn,
			const real_T *TIn,
			const real_T *FIn,
			const real_T *mDotIn,
			const real_T *combState,
			const real_T *phi,
			const real_T *TOut,
			const real_T *FOut,
			real_T *dx,
			real_T *xC,
			const real_T  *kai,  const int_T  p_width0,
			const real_T  *delta,  const int_T  p_width1,
			const real_T  *fs,  const int_T  p_width2,
			const real_T  *volDisp,  const int_T  p_width3,
			const real_T  *CAIPO, const int_T  p_width4);

extern void scavenging1Zone_Update_wrapper(const real_T *pCyl,
			const real_T *TCyl,
			const real_T *FCyl,
			const real_T *pIn,
			const real_T *TIn,
			const real_T *FIn,
			const real_T *mDotIn,
			const real_T *combState,
			const real_T *phi,
			const real_T *TOut,
			const real_T *FOut,
			real_T *dx,
			real_T *xC,
			const real_T  *kai,  const int_T  p_width0,
			const real_T  *delta,  const int_T  p_width1,
			const real_T  *fs,  const int_T  p_width2,
			const real_T  *volDisp,  const int_T  p_width3,
			const real_T  *CAIPO, const int_T  p_width4,
            int_T *resetIn,
			int_T *resetOut,
            real_T *mInPrev,
            real_T *F0,
			real_T *rho0,			
			real_T *hIn0,
			real_T *hCyl0);

  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  
  { 
   real_T *xC   = &%<LibBlockContinuousState("", "", 0)>;
   int_T *resetIn = &%<LibBlodckDWork(DWork[0],"","",0)>;
   int_T *resetOut = &%<LibBlodckDWork(DWork[1],"","",0)>;
   real_T *mInPrev = &%<LibBlodckDWork(DWork[2],"","",0)>;
   real_T *F0 = &%<LibBlodckDWork(DWork[3],"","",0)>;
   real_T *rho0 = &%<LibBlodckDWork(DWork[4],"","",0)>;
   real_T *hIn0 = &%<LibBlodckDWork(DWork[5],"","",0)>;
   real_T *hCyl0 = &%<LibBlodckDWork(DWork[6],"","",0)>;

    /* Initialize the dwork*/
    xC[0] =  0;
    resetIn[0] = 1;
    resetOut[0] = 1;
    mInPrev[0] = 0;
    F0[0] = 0;
    rho0[0] = 1.16;
    hIn0[0] = 3e5;
    hCyl0[0] = 3e5;
  }
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu7 = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pu8 = LibBlockInputSignalAddr(8, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
 { 
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    int_T *resetIn = &%<LibBlodckDWork(DWork[0],"","",0)>;
    int_T *resetOut = &%<LibBlodckDWork(DWork[1],"","",0)>;
    real_T *mInPrev = &%<LibBlodckDWork(DWork[2],"","",0)>;
    real_T *F0 = &%<LibBlodckDWork(DWork[3],"","",0)>;
    real_T *rho0 = &%<LibBlodckDWork(DWork[4],"","",0)>;
    real_T *hIn0 = &%<LibBlodckDWork(DWork[5],"","",0)>;
    real_T *hCyl0 = &%<LibBlodckDWork(DWork[6],"","",0)>;
    scavenging1Zone_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>,
         %<pu5>, %<pu7>, %<pu8>, %<py0>, %<py1>, %<py2>, %<py3>,pxc, 
        %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  
        %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, 
        %<pp5>, %<param_width5>, 
        resetIn, resetOut, mInPrev, F0, rho0, hIn0, hCyl0);

  }  %%
%endfunction


%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
   /* S-Function "scavenging1Zone_wrapper" Block: %<Name> */  

  
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign pu7 = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pu8 = LibBlockInputSignalAddr(8, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)

  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1    
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1) 
  %else    
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1    
   %assign pp2 = LibBlockMatrixParameterBaseAddr(P2) 
  %else    
   %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1    
   %assign pp3 = LibBlockMatrixParameterBaseAddr(P3) 
  %else    
   %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1    
   %assign pp4 = LibBlockMatrixParameterBaseAddr(P4) 
  %else    
   %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1    
   %assign pp5 = LibBlockMatrixParameterBaseAddr(P5) 
  %else    
   %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif  
 
  
 { 
   real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
   real_T *dx  =  &%<LibBlockContinuousStateDerivative("","",0)>;
   scavenging1Zone_Derivatives_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, 
        %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<pu8>, 
        %<py0>, %<py1>, %<py2>, %<py3>, dx, pxc, 
        %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, 
        %<pp3>, %<param_width3>, %<pp4>, %<param_width4>,
        %<pp5>, %<param_width5>,);
  }
  %%
%endfunction 
%% [EOF] scavenging1Zone.tlc

%% Function: Update ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlUpdate function.
%%
%function Update(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign pu7 = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pu8 = LibBlockInputSignalAddr(8, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
 { 
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    real_T *dx  =  &%<LibBlockContinuousStateDerivative("","",0)>;
    int_T *resetIn = &%<LibBlodckDWork(DWork[0],"","",0)>;
    int_T *resetOut = &%<LibBlodckDWork(DWork[1],"","",0)>;
    real_T *mInPrev = &%<LibBlodckDWork(DWork[2],"","",0)>;
    real_T *F0 = &%<LibBlodckDWork(DWork[3],"","",0)>;
    real_T *rho0 = &%<LibBlodckDWork(DWork[4],"","",0)>;
    real_T *hIn0 = &%<LibBlodckDWork(DWork[5],"","",0)>;
    real_T *hCyl0 = &%<LibBlodckDWork(DWork[6],"","",0)>;
    scavenging1Zone_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>,
         %<pu5>, , %<pu6>, %<pu7>, %<pu8>, %<py0>, %<py1>, %<py2>, %<py3>, 
        pxc, dx, 
        %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  
        %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, 
        %<pp5>, %<param_width5>, 
        resetIn, resetOut, mInPrev, F0, rho0, hIn0, hCyl0,);

  }  %%
%endfunction




