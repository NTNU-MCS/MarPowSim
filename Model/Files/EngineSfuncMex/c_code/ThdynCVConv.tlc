%% File : ThdynCVConv.tlc
%% Created: Mon Sep  8 13:42:35 2014
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "ThdynCVConv.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  ThdynCVConv "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
  extern void ThdynCVConv_Outputs_wrapper(const real_T *dm,
                          const real_T *dE,
                          const real_T *dmf,
                          const real_T *dV,
                          real_T *p,
                          real_T *T,
                          real_T *F,
                          real_T *V ,
			   const real_T *xC,
                          const real_T  *fs, const int_T  p_width0, 
                          const real_T  *p0, const int_T  p_width1, 
                          const real_T  *T0, const int_T  p_width2, 
                          const real_T  *F0, const int_T  p_width3, 
                          const real_T  *V0, const int_T p_width4);
  extern void ThdynCVConv_Derivatives_wrapper(const real_T *dm,
                          const real_T *dE,
                          const real_T *dmf,
                          const real_T *dV,
                          const real_T *p,
                          const real_T *T,
                          const real_T *F,
                          const real_T *V,
                          real_T *dx ,
                          real_T *xC, 
                          const real_T  *fs,  const int_T  p_width0,
                          const real_T  *p0,  const int_T  p_width1,
                          const real_T  *T0,  const int_T  p_width2,
                          const real_T  *F0,  const int_T  p_width3,
                           const real_T *V0, const int_T  p_width4);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  
  { 
   real_T *xC   = &%<LibBlockContinuousState("", "", 0)>;
      
   %assign pnelements2 = LibBlockParameterSize(P2)
   %assign cparam_width2 = pnelements2[0] * pnelements2[1]
   %if (cparam_width2) > 1
     %assign p_c2 = LibBlockMatrixParameter(P2)
   %else
     %assign p_c2 = LibBlockParameter(P2, "", "", 0)
   %endif

   %assign pnelements3 = LibBlockParameterSize(P3)
   %assign cparam_width3 = pnelements3[0] * pnelements3[1]
   %if (cparam_width3) > 1
     %assign p_c3 = LibBlockMatrixParameter(P3)
   %else
     %assign p_c3 = LibBlockParameter(P3, "", "", 0)
   %endif

   %assign pnelements5 = LibBlockParameterSize(P5)
   %assign cparam_width5 = pnelements5[0] * pnelements5[1]
   %if (cparam_width5) > 1
     %assign p_c5 = LibBlockMatrixParameter(P5)
   %else
     %assign p_c5 = LibBlockParameter(P5, "", "", 0)
   %endif

   
    xC[0] =  %<p_c2>;
    xC[1] =  %<p_c3>;
    xC[2] =  1;
    xC[3] =  1;
    xC[4] =  %<p_c5>;
  }
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
 { 
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    ThdynCVConv_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<py0>, %<py1>, %<py2>, %<py3>, pxc,  %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  %<pp3>, %<param_width3>,  %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);

  }  %%
%endfunction


%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
   /* S-Function "ThdynCVConv_wrapper" Block: %<Name> */  

  
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1    
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1) 
  %else    
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1    
   %assign pp2 = LibBlockMatrixParameterBaseAddr(P2) 
  %else    
   %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1    
   %assign pp3 = LibBlockMatrixParameterBaseAddr(P3) 
  %else    
   %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1    
   %assign pp4 = LibBlockMatrixParameterBaseAddr(P4) 
  %else    
   %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1    
   %assign pp5 = LibBlockMatrixParameterBaseAddr(P5) 
  %else    
   %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  
 
  
 { 
   real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
   real_T *dx  =  &%<LibBlockContinuousStateDerivative("","",0)>;
   ThdynCVConv_Derivatives_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<py0>, %<py1>, %<py2>, %<py3>, dx, pxc, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  }
  %%
%endfunction 
%% [EOF] ThdynCVConv.tlc





