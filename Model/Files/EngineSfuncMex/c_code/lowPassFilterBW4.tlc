%% File : lowPassFilterBW4.tlc
%% Created: Thu Aug  7 11:08:34 2014
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "lowPassFilterBW4.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  lowPassFilterBW4 "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
  extern void lowPassFilterBW4_Outputs_wrapper(const real_T *u,
                          real_T *y ,
			   const real_T *xC,
                          const real_T  *BW, const int_T  p_width0, 
                          const real_T  *y0, const int_T p_width1);
  extern void lowPassFilterBW4_Derivatives_wrapper(const real_T *u,
                          const real_T *y,
                          real_T *dx ,
                          real_T *xC, 
                          const real_T  *BW,  const int_T  p_width0,
                           const real_T *y0, const int_T  p_width1);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  
  { 
   real_T *xC   = &%<LibBlockContinuousState("", "", 0)>;
    
   %assign pnelements2 = LibBlockParameterSize(P2)
   %assign cparam_width2 = pnelements2[0] * pnelements2[1]
   %if (cparam_width2) > 1
     %assign p_c2 = LibBlockMatrixParameter(P2)
   %else
     %assign p_c2 = LibBlockParameter(P2, "", "", 0)
   %endif

   
    xC[0] =  %<p_c2>;
    xC[1] =  0;
    xC[2] =  0;
    xC[3] =  0;
  }
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
 { 
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    lowPassFilterBW4_Outputs_wrapper(%<pu0>, %<py0>, pxc,  %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);

  }  %%
%endfunction


%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
   /* S-Function "lowPassFilterBW4_wrapper" Block: %<Name> */  

  
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1    
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1) 
  %else    
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1    
   %assign pp2 = LibBlockMatrixParameterBaseAddr(P2) 
  %else    
   %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  
 
  
 { 
   real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
   real_T *dx  =  &%<LibBlockContinuousStateDerivative("","",0)>;
   lowPassFilterBW4_Derivatives_wrapper(%<pu0>, %<py0>, dx, pxc, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  }
  %%
%endfunction 
%% [EOF] lowPassFilterBW4.tlc





