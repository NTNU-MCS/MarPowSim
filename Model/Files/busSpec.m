%    Copyright: 	NTNU, Trondheim, Norway
%    Licensed under GPL-3.0
%    Created:  	2014-2017	Torstein Aarseth BÃ¸ <torstein.bo@sintef.no>
function cellInfo = busSpec(varargin)
% BUSSPEC returns a cell array containing bus object information 
% 
% Optional Input: 'false' will suppress a call to Simulink.Bus.cellToObject 
%                 when the MATLAB file is executed. 
% The order of bus element attributes is as follows:
%   ElementName, Dimensions, DataType, SampleTime, Complexity, SamplingMode, DimensionsMode, Min, Max, DocUnits, Description 

suppressObject = false; 
if nargin == 1 && islogical(varargin{1}) && varargin{1} == false 
    suppressObject = true; 
elseif nargin > 1 
    error('Invalid input argument(s) encountered'); 
end 

cellInfo = { ... 
  { ... 
    'Breaker', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'BreakerStatus', 1, 'boolean', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'Swb1', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'Swb2', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'EmergencyBattery', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'powerDelivered', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'powerAvailable', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'swbId', 1, 'uint8', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'Genset2PMS', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'GensetID', 1, 'uint8', -1, 'real', 'Sample', 'Fixed', 1, [], '', ''}; ...
{'SwitchboardID', 1, 'uint8', -1, 'real', 'Sample', 'Fixed', 1, [], '', ''}; ...
{'Sb', 1, 'double', -1, 'real', 'Sample', 'Fixed', 0, [], '', ''}; ...
{'P', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('Watt'), sprintf('Active power')}; ...
{'Q', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('Watt'), sprintf('Reactive power')}; ...
{'Connected', 1, 'boolean', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'powerAvailable', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'GensetOut', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'TheveninBus', 1, 'Bus: TheveninBus', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'Genset2PMS', 1, 'Bus: Genset2PMS', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'PmsToLoads', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'powerAvailableLowPriority', 3, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'powerAvailableHighPriority', 3, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'TheveninBus', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'E', 1, 'double', -1, 'complex', 'Sample', 'Fixed', [], [], sprintf('per unit'), sprintf('Thevenin voltage')}; ...
{'Z', 1, 'double', -1, 'complex', 'Sample', 'Fixed', [], [], sprintf('per unit'), sprintf('Thevenin Reactance')}; ...
{'Sb', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('Watt'), sprintf('Base power of Thevenin Source')}; ...
{'Connected', 1, 'boolean', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('1 if source circuit is connected with target\n0 if not connected')}; ...
{'omega', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'SwitchboardID', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'ThrusterBus', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'power', 1, 'Bus: powerLoadsBus', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'alpha', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'f', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'ThrusterID', 1, 'uint8', -1, 'real', 'Sample', 'Fixed', 1, [], '', ''}; ...
{'SwitchboardID', 1, 'uint8', -1, 'real', 'Sample', 'Fixed', 1, [], '', ''}; ...
{'Connected', 1, 'boolean', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'RatedPower', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'command_tau', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'power_available_tau', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'KP', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'KT', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'positionX', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('meter'), sprintf('Position of thruster in surge-direction')}; ...
{'positionY', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Position of thruster in sway-direction')}; ...
{'positionZ', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('meter'), sprintf('Position of thruster in heave-direction')}; ...
{'fRampTime', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('seconds'), sprintf('Minimum time to go from zero thrust to full thrust')}; ...
{'alpha_min', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('rad'), sprintf('Minimum azimuth angle of thruster (or - infinity if unbounded)')}; ...
{'alpha_max', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('rad'), sprintf('Maximum azimuth angle of thruster (or infinity if unbounded)')}; ...
{'fMin', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('%%'), sprintf('Minimum thrust relative to maximum thrust.')}; ...
{'turnTime', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('seconds'), ''}; ...
{'reversePowerFactor', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'rotable', 1, 'boolean', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'powerMax', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'bus2switchboard', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'bus1', 1, 'double', -1, 'real', 'Sample', 'Variable', [], [], '', ''}; ...
{'bus2', 1, 'double', -1, 'real', 'Sample', 'Variable', [], [], '', ''}; ...
{'bus3', 1, 'double', -1, 'real', 'Sample', 'Variable', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'control', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'wNL', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'controlCommon', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'genset', 6, 'Bus: control', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'electric', ... 
    '', ... 
    sprintf('Data connected to the generator'), ... 
    'Auto', ... 
    '-1', {... 
{'pmax', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Maximum power available from genset')}; ...
{'E', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('[pu]'), sprintf('Induced voltage')}; ...
{'vf', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('[pu]'), sprintf('Field voltage')}; ...
    } ...
  } ...
  { ... 
    'fuel', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'u', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Fuel index')}; ...
{'FC', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Fuel consumption')}; ...
{'umax', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Maximum fuel index, given the current inlet manifold pressure')}; ...
{'AF', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Air-to-fuel ratio')}; ...
{'pin', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Inlet manifold pressure')}; ...
{'tm', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Mechanical torque (torque produced by burned fuel)')}; ...
    } ...
  } ...
  { ... 
    'governor', ... 
    '', ... 
    sprintf('Data connected to governor in genset'), ... 
    'Auto', ... 
    '-1', {... 
{'uP', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Fuel rack position from proportional controller')}; ...
{'uI', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Fuel rack position from integral controller')}; ...
{'uD', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Fuel rack position from derivative controller')}; ...
{'xii', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Integral term in integral controller')}; ...
{'xid', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Integral in low-pass filtered derivative of frequency')}; ...
    } ...
  } ...
  { ... 
    'loadsToPMS', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'swbId', 1, 'uint8', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'powerHighPriority', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'powerDesiredHighPriority', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'powerLowPriority', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'powerDesiredLowPriority', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'powerLoadsBus', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'p', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('W'), sprintf('Active power. One element for each switchboard')}; ...
{'q', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], sprintf('W'), sprintf('Reactive power. One element for each switchboard')}; ...
{'SwitchboardID', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'shaft', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'theta', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Electrical angle of rotor')}; ...
{'omega', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', sprintf('Per unit frequency')}; ...
    } ...
  } ...
  { ... 
    'swb', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'voltage', 1, 'double', -1, 'complex', 'Sample', 'Fixed', [], [], sprintf('per unit'), ''}; ...
{'omega', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'thetaElectric', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'swb2swb', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'RingID', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'BusID', 1, 'uint8', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'Load', 1, 'Bus: powerLoadsBus', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'TheveninBus', 1, 'Bus: TheveninBus', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'thrusterCmd', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', {... 
{'alpha', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'u', 1, 'double', -1, 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
}'; 

if ~suppressObject 
    % Create bus objects in the MATLAB base workspace 
    Simulink.Bus.cellToObject(cellInfo) 
end 
